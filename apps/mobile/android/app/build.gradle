def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def envProperties = new Properties()
def envPropertiesFile = rootProject.file('env.properties')
if (envPropertiesFile.exists()) {
    envProperties.load(new FileInputStream(envPropertiesFile))
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}


apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId envProperties.getProperty("app.id")
        minSdkVersion 21
        targetSdkVersion 33
        versionCode envProperties.getProperty("app.code", "999").toInteger()
        versionName envProperties.getProperty("app.name", "1.0")  
        resConfigs "en"
    }


    signingConfigs {
        release { 
            if (System.getenv()["CI"]) { // CI=true is exported by Codemagic
               storeFile file(System.getenv()["CM_KEYSTORE_PATH"])
               storePassword System.getenv()["CM_KEYSTORE_PASSWORD"]
               keyAlias System.getenv()["CM_KEY_ALIAS"]
               keyPassword System.getenv()["CM_KEY_PASSWORD"]
           } else {
               keyAlias keystoreProperties['keyAlias']
               keyPassword keystoreProperties['keyPassword']
               storeFile file(keystoreProperties['storeFile'])
               storePassword keystoreProperties['storePassword']
           }

        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            manifestPlaceholders = [ 
                appName: envProperties.getProperty("name", "Mobile"),
            ]

            // Enables code shrinking, obfuscation, and optimization for only
            // your project's release build type.
            minifyEnabled true

//             Enables resource shrinking, which is performed by the
//             Android Gradle plugin.
            shrinkResources true

//             Includes the default ProGuard rules files that are packaged with
//             the Android Gradle plugin. To learn more, go to the section about
//             R8 configuration files.
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'

        }

        debug { 
            signingConfig signingConfigs.debug
            manifestPlaceholders = [ 
                appName: envProperties.getProperty("name", "Mobile"),
            ]
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

//subprojects {
//    project.buildDir = "${rootProject.buildDir}/${project.name}"
//    project.evaluationDependsOn(':app')
//    afterEvaluate {project ->
//        if (project.hasProperty("android") && project.property("android").compileSdkVersion == "android-R") {
//            android {
//                compileSdkVersion 33
//            }
//        }
//    }
//}
